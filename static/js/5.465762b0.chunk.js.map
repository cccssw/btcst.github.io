{"version":3,"sources":["src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/Heading.tsx","src/components/Border.tsx","src/utils/api-utils.ts","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Notice.tsx","src/components/Input.tsx","src/components/TokenInput.tsx","src/components/Meta.tsx","src/hooks/useSTStakingState.tsx","src/components/ApproveButton.tsx","src/screens/SHTStakeScreen.tsx"],"names":["Column","props","View","style","width","marginTop","noTopMargin","Platform","OS","Spacing","large","normal","SocialIcon","darkMode","useContext","GlobalContext","useColors","background","textLight","light","iconColor","undefined","backgroundColor","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onMedium","onTg","onPressDiscord","FlexView","justifyContent","type","onPress","name","raised","reverse","color","reverseColor","containerStyle","flags","us","require","uk","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","height","WebFooter","padding","alignItems","Text","note","tiny","Constants","manifest","version","small","Heading","accent","marginBottom","disabled","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","text","buttonText","size","title","onPressButton","buttonStyle","paddingHorizontal","Border","border","fetchTotalMinedRTokenInpool","provider","a","async","contract","getContract","BTCSTFarm","viewAllTimeTotalMined","value","fetchCurrentTotalStakedSTokenInpool","BTCST","balanceOf","console","log","totalSupplyOfSToken","totalSupply","getFreeToTransferAmount","account","viewUserInfo","stakeActions","enter","useCallback","amount","signer","farm","estimateGas","apiDepositToMining","gasLimit","toString","mul","div","tx","logTransaction","leave","apiWithdrawLatestSToken","viewTotalClaimedRewardFrom","viewGetTotalRewardBalanceInPool","apiClaimAmountOfReward","reCalculate","ErrorMessage","error","code","message","InfoBox","backgroundLight","borderDark","useStyles","FetchingButton","t","useTranslation","InsufficientBalanceButton","symbol","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","Input","textDark","textMedium","onChangeText","onError","errors","forbidden","forEach","validation","match","regexp","allowed","length","join","inputStyle","fontFamily","minHeight","outline","labelStyle","placeholderTextColor","errorStyle","MaxButton","onPressMax","token","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","Button","maxButtonText","TokenInput","onAmountChanged","parseBalance","e","endsWith","indexOf","label","placeholder","keyboardType","autoFocus","inputContainerStyle","borderBottomWidth","paddingTop","hideMaxButton","Meta","url","suffix","textDecorationLine","useSTStakingState","EthersContext","address","getTokenAllowance","tokens","updateTokens","useState","setAmount","stoken","setSToken","loading","setloading","stokenAllowed","setSTokenAllowed","yourTotalSToken","setYourTotalSToken","yourFreeToSendSToken","setYourFreeToSendSToken","yourSTokenStaked","setYourSTokenStaked","totalSTokenSupply","setTotalSTokenSupply","entering","setEntering","leaving","setLeaving","txHappend","setTxHappend","sToken","logoURI","BigNumber","from","useEffect","useAsyncEffect","minAllowance","pow","stokenAllowance","gte","getAddress","freeToMove","userInfoInFarm","stokenContract","onEnter","parsed","wait","onLeave","ApproveButton","approveToken","setLoading","spender","onSuccess","hidden","Staking","state","isZero","STokenBalance","AmountInput","StakeInfo","isEmptyValue","powerPrice","FixedNumber","divUnsafe","powerPerHashUnitDay","mulUnsafe","dailyBTCYeild","btcPrice","dailyBTCNetrewardPerHashUnit","subUnsafe","dailyReward","alreadyReward","suppose","addUnsafe","dailyRewardTotal","fromString","share","add","round","Controls","setError","StakeButton","SHTStakeScreen","Screen","Container","BackgroundImage","Content","Title"],"mappings":"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","file":"static/js/5.465762b0.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"http://twitter.com/BTCST2020\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    \n    const onMedium = useLinker(\"https://medium.com/@btcst2020\", \"\", \"_blank\");\n    // const onPressReddit = useLinker(\"https://www.reddit.com/user/BTCStandardHashrate\", \"\", \"_blank\");\n    const onTg = useLinker(\"https://t.me/BTCSTCommunity\",\"\",\"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.com/channels/791170396316893255/791170396765945886\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"medium\" onPress={onMedium} />\n            <SocialIcon type=\"telegram\" onPress={onTg} />\n            {/* <SocialIcon type=\"twitch\" onPress={onPressReddit} /> */}\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    uk: require(\"../../../assets/flags/uk.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://dashboard.alchemyapi.io/signup\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <SocialIcons />\n                {/* <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/alchemy.png\")}\n                        style={{ width: 188, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight> */}\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by Standard Hashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"uk\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY, Pair } from \"@sushiswap/sdk\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { ALCHEMY_PROVIDER } from \"../context/EthersContext\";\nimport { Order, OrderStatus } from \"../hooks/useSettlement\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { useCallback } from \"react\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nimport {\n    convertToken,\n    formatBalance,\n    getContract,\n    isETH,\n    isWETH,\n    parseBalance,\n    parseCurrencyAmount,\n    pow10\n} from \"./index\";\nexport const fetchTotalMinedRTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewAllTimeTotalMined();\n    return value;\n};\n\nexport const fetchCurrentTotalStakedSTokenInpool = async (provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.balanceOf(BTCSTFarm);\n    console.log(\"fetchCurrentTotalStakedSTokenInpool\");\n    console.log(value);\n    return value;\n};\n\nexport const viewTotalRewardInPoolFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPoolFrom(account);\n    return value;\n    \n};\nexport const totalSupplyOfSToken = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IBEP20\",BTCST,provider);\n    const value = await contract.totalSupply();\n    return value;\n};\n\nexport const viewTotalRewardInPool = async(provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalRewardInPool();\n    return value;\n};\n\nexport const getFreeToTransferAmount = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"ISTokenERC20\",BTCST,provider);\n    const value = await contract.getFreeToTransferAmount(account);\n    return value;\n};\n\nexport const viewUserInfo = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewUserInfo(account);\n    return value;\n};\n\nexport const stakeActions = ()=>{\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiDepositToMining(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiDepositToMining(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const farm = getContract(\"IMiningFarm\", BTCSTFarm, signer);\n        console.log(\"before gas limit:\"+amount);\n        const gasLimit = await farm.estimateGas.apiWithdrawLatestSToken(amount);\n        console.log(await gasLimit.toString()+\" gas limit\");\n        const tx = await farm.apiWithdrawLatestSToken(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"stakeActions.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport const viewTotalMinedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalMinedRewardFrom(account);\n    return value;\n};\nexport const viewTotalClaimedRewardFrom = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewTotalClaimedRewardFrom(account);\n    return value;\n};\nexport const viewGetTotalRewardBalanceInPool = async(account: string,provider: ethers.providers.JsonRpcProvider)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,provider);\n    const value = await contract.viewGetTotalRewardBalanceInPool(account);\n    return value;\n};\n\nexport const apiClaimAmountOfReward = async(account: string,amount: ethers.BigNumber,reCalculate :boolean ,signer: ethers.Signer)=>{\n    const contract = getContract(\"IMiningFarm\",BTCSTFarm,signer);\n    const gasLimit = await contract.estimateGas.apiClaimAmountOfReward(account,amount,reCalculate);\n    const tx = await contract.apiClaimAmountOfReward(account,amount,reCalculate, {\n        gasLimit: gasLimit.mul(120).div(100)\n    });\n    return logTransaction(tx, \"farmActions.apiClaimAmountOfReward()\", amount.toString());\n};","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { fetchLPTokenWithValue, fetchMyLPTokens, fetchMyPools } from \"../utils/fetch-utils\";\nimport useSDK from \"./useSDK\";\nimport { viewUserInfo,getFreeToTransferAmount,totalSupplyOfSToken,stakeActions, fetchCurrentTotalStakedSTokenInpool,viewTotalRewardInPoolFrom} from \"../utils/api-utils\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { getContract, parseBalance } from \"../utils\";\n\nexport interface StakingState {\n    loading:boolean;\n    stoken?: Token;\n    \n    amount: string;\n    setAmount: (amount: string) => void;\n\n    yourTotalSToken:ethers.BigNumber;\n    yourFreeToSendSToken:ethers.BigNumber;\n    yourSTokenStaked:ethers.BigNumber;\n\n    stokenAllowed: boolean;\n    setSTokenAllowed: (allowed: boolean) => void;\n    \n    totalSTokenSupply:ethers.BigNumber;\n\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n\n    txHappend:number;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSTStakingState = () => {\n    const { provider,signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n\n    const [amount, setAmount] = useState(\"\");\n    const { enter, leave } = stakeActions();\n    const [stoken,setSToken] = useState<Token>();\n    const [loading,setloading] = useState(true);\n    const [stokenAllowed, setSTokenAllowed] = useState(false);\n\n    const [yourTotalSToken,setYourTotalSToken] = useState<ethers.BigNumber>();\n    const [yourFreeToSendSToken,setYourFreeToSendSToken] = useState<ethers.BigNumber>();\n    const [yourSTokenStaked,setYourSTokenStaked] = useState<ethers.BigNumber>();\n    const [totalSTokenSupply,setTotalSTokenSupply] = useState<ethers.BigNumber>();\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n    const [txHappend,setTxHappend] = useState<number>(0);\n\n    const sToken :Token ={\n        name: \"Standard BTC Hashrate Token\",\n        address: BTCST,\n        decimals: 18,\n        symbol: \"BTCST\",\n        logoURI: \"\",\n        balance: ethers.BigNumber.from(0)\n    };\n\n    useEffect(() => {\n        setAmount(\"\");\n        setSToken(sToken);\n        setloading(true);\n        setYourFreeToSendSToken(ethers.BigNumber.from(0));\n        setYourSTokenStaked(ethers.BigNumber.from(0));\n        setYourTotalSToken(ethers.BigNumber.from(0));\n        setTxHappend(0);\n    }, [address]);\n    useAsyncEffect(async()=>{\n        if (provider && signer && stoken) {\n            setSTokenAllowed(false);\n            setloading(true);\n            try{\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const stokenAllowance = await getTokenAllowance(stoken.address, BTCSTFarm);\n                setSTokenAllowed(ethers.BigNumber.from(stokenAllowance).gte(minAllowance));\n                const freeToMove = await getFreeToTransferAmount(await signer.getAddress(),provider);\n                const userInfoInFarm = await viewUserInfo(await signer.getAddress(),provider);\n                setYourFreeToSendSToken(await freeToMove);\n                setYourSTokenStaked((await userInfoInFarm).amount);\n                const stokenContract = getContract(\"ERC20\", BTCST, signer);\n                setYourTotalSToken(await stokenContract.balanceOf(signer.getAddress()));\n                setTotalSTokenSupply(await totalSupplyOfSToken(provider));\n            }finally{\n                setloading(false);\n            }\n        }\n    },[provider,signer,stoken,txHappend]);\n    const onEnter = useCallback(async () => {\n        if (amount && stoken && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, stoken.decimals);\n                console.log(\"before entering\");\n                const tx = await enter(parsed, signer);\n                console.log(\"before wait\");\n                if (tx) {\n                    await tx.wait();\n                    // await updateTokens();\n                    setAmount(\"\");\n                    const txs = txHappend+1;\n                    setTxHappend(txs);\n                    console.log(\"after wait\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, stoken, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && signer &&stoken) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, stoken.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    // await updateTokens();\n                    setAmount(\"\");\n                    const txs = txHappend+1;\n                    setTxHappend(txs);\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, stoken, signer]);\n    return {\n        loading,\n        amount,\n        setAmount,\n        stoken,\n        yourTotalSToken,\n        yourFreeToSendSToken,\n        yourSTokenStaked,\n        stokenAllowed,\n        setSTokenAllowed,\n        totalSTokenSupply,\n        onEnter,\n        entering,\n        onLeave,\n        leaving,\n        txHappend\n    };\n};\n\nexport default useSTStakingState;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve\") + \" \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { BTCST,BTCSTFarm,BBTC } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useSTStakingState, { StakingState } from \"../hooks/useSTStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\nimport useColors from \"../hooks/useColors\";\nimport { ethers } from \"ethers\";\n\nconst SHTStakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"stake\")} />\n                    <Text light={true}>{t(\"stake-desc\")\n                    // +t(\"or\")+\" \"+t(\"just-send-to-address\")+\" \"+BTCSTFarm\n                                    }</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const t = useTranslation();\n    const state = useSTStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <STokenBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.stoken && state.yourTotalSToken?.isZero() && (\n                <Notice text={t(\"you-dont-have-btcst\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <StakeInfo state={state} />\n        </View>\n    );\n};\n\nconst STokenBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const {loading,yourTotalSToken,yourFreeToSendSToken,yourSTokenStaked,stokenAllowed} = state;\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <View>\n            {/* <Heading text={t(\"your-BTCTS\")} /> */}\n            <Text\n                style={{\n                    fontSize: IS_DESKTOP ? 28 : 20,\n                    marginBottom: Spacing.tiny,\n                    color: loading? textLight : textDark \n                }}>\n                {loading || !state.stoken || !yourTotalSToken? t(\"fetching\")\n                    :t(\"you-have\")+\" \"+formatBalance(yourTotalSToken, state.stoken.decimals)+\" BTCST\"\n                    }\n            </Text>\n            <Text\n                style={{\n                    fontSize: IS_DESKTOP ? 14 : 10,                    \n                    marginBottom: Spacing.tiny,\n                    color: loading? textLight : textDark \n                }}>\n                {loading || !state.stoken || !yourTotalSToken? \"\"\n                :t(\"free-to-send\")+formatBalance(yourFreeToSendSToken, state.stoken.decimals)+\" \"\n                +t(\"staked-in-pool\")+formatBalance(yourSTokenStaked, state.stoken.decimals)}\n            </Text>\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.stoken || state.yourTotalSToken.isZero()) {\n        return <Heading text={t(\"amount-to-stake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-stake\")} />\n            <TokenInput\n                token={state.stoken}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    const disabled =\n        !state.stoken ||\n        state.yourTotalSToken.isZero() ||\n        !state.yourSTokenStaked ||\n        isEmptyValue(state.amount);\n        \n    const powerPrice = ethers.FixedNumber.from(58).divUnsafe(ethers.FixedNumber.from(1000*1000));\n    const powerPerHashUnitDay = ethers.FixedNumber.from(60).mulUnsafe(ethers.FixedNumber.from(24));\n    const dailyBTCYeild = ethers.FixedNumber.from(711).divUnsafe(ethers.FixedNumber.from(100000000));\n    const btcPrice = ethers.FixedNumber.from(22715);\n    const dailyBTCNetrewardPerHashUnit = dailyBTCYeild.subUnsafe(\n        powerPerHashUnitDay.mulUnsafe(powerPrice).divUnsafe(btcPrice));\n\n    console.log(dailyBTCNetrewardPerHashUnit.toString()+\" dailyBTCNetrewardPerHashUnit\");\n    \n    const dailyReward = disabled\n        ? undefined\n        : ethers.FixedNumber.from(state.amount)\n              .mulUnsafe(dailyBTCNetrewardPerHashUnit)\n              .divUnsafe(ethers.FixedNumber.from(10));\n    const alreadyReward = disabled\n        ? undefined\n        : ethers.FixedNumber.from(formatBalance(state.yourSTokenStaked,state.stoken!.decimals))\n            .mulUnsafe(dailyBTCNetrewardPerHashUnit)\n            .divUnsafe(ethers.FixedNumber.from(10));\n    const suppose = disabled? undefined:dailyReward?.addUnsafe(alreadyReward!);\n    // console.log(dailyReward?.toString()+\" dailyReward\");\n\n    const dailyRewardTotal = disabled ? undefined : \n            ethers.FixedNumber.fromString(formatBalance(state.totalSTokenSupply,state.stoken!.decimals))\n            .divUnsafe(ethers.FixedNumber.from(10)).mulUnsafe(dailyBTCNetrewardPerHashUnit);\n    const stoenBalance = disabled ? undefined : \n                            parseBalance(state.amount, state.stoken!.decimals)\n                            .add(state.yourSTokenStaked!);\n\n    const share = disabled\n        ? undefined\n        : suppose!.divUnsafe(dailyRewardTotal!).mulUnsafe(ethers.FixedNumber.from(100)).round(6);\n    return (\n        <InfoBox>\n            {/* <AmountMeta\n                amount={suppose ? suppose.round(8).toString() : \"\"}\n                suffix={t(\"btcb-estimated\")}\n                disabled={disabled}\n            /> */}\n            <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: disabled ? placeholder : textLight\n            }}>\n            {disabled ? t(\"n/a\") : t(\"btcb-estimated\")}\n            </Text>\n            <Meta label={t(\"daily-share\")} text={share} suffix={\"%\"} disabled={disabled} />\n            <Meta label={t(\"your-daily-reward\")} text={suppose ? suppose.round(8).toString() : \"\"} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.stoken || state.yourTotalSToken.isZero() || isEmptyValue(state.amount) ? (\n                <StakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.stoken.decimals).gt(state.yourTotalSToken) ? (\n                <InsufficientBalanceButton symbol={state.stoken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.stoken}\n                        spender={BTCSTFarm}\n                        onSuccess={() => state.setSTokenAllowed(true)}\n                        onError={setError}\n                        hidden={state.stokenAllowed}\n                    />\n                    <StakeButton state={state} onError={setError} disabled={!state.stokenAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n            console.log(e);\n        }\n    };\n    return <Button title={t(\"stake\")} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default SHTStakeScreen;\n"],"sourceRoot":""}