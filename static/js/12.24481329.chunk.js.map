{"version":3,"sources":["src/screens/SHTUnstakeScreen.tsx"],"names":["Staking","t","useTranslation","state","useSTStakingState","style","marginTop","Spacing","large","STokenBalance","AmountInput","stoken","yourSTokenStaked","isZero","text","color","small","UnstakeInfo","marginBottom","tiny","amount","formatBalance","decimals","suffix","disabled","token","onAmountChanged","setAmount","autoFocus","IS_DESKTOP","isEmptyValue","unStakeAmount","undefined","parseBalance","Controls","useState","error","setError","normal","UnstakeButton","onError","gt","symbol","loading","message","code","title","leaving","onPress","a","async","onLeave","SHTUnstakeScreen","light","Platform","OS"],"mappings":"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","file":"static/js/12.24481329.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useSTStakingState, { StakingState } from \"../hooks/useSTStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SHTUnstakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"unstake\")} />\n                    <Text light={true}>{t(\"unstake-desc\")}</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const t = useTranslation();\n    const state = useSTStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <STokenBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.stoken && state.yourSTokenStaked?.isZero()  && (\n                <Notice text={t(\"you-dont-have-staked-stoken\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <UnstakeInfo state={state} />\n        </View>\n    );\n};\n\nconst STokenBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading text={t(\"your-staked-BTCTS\")} />\n            <AmountMeta\n                style={{marginBottom: Spacing.tiny}}\n                amount={state.yourSTokenStaked ? \n                    formatBalance(state.yourSTokenStaked, state.stoken!.decimals) : \"\"}\n                suffix={\"BTCST\"}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.stoken || state.yourSTokenStaked.isZero()) {\n        return <Heading text={t(\"amount-to-unstake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-unstake\")} />\n            <TokenInput\n                token={state.stoken}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\nconst UnstakeInfo = ({ state }: { state: StakingState }) => {\n    const disabled =\n        !state.stoken || !state.yourSTokenStaked\n         || state.yourSTokenStaked.isZero() \n         || isEmptyValue(state.amount);\n    const unStakeAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.stoken!.decimals);\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={unStakeAmount ? formatBalance(unStakeAmount, state.stoken!.decimals, 8) : \"\"}\n                suffix={\"BTCST\"}\n                disabled={disabled}\n            />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.stoken || state.yourSTokenStaked.isZero() || isEmptyValue(state.amount) ? (\n                <UnstakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.stoken.decimals).gt(state.yourSTokenStaked) ? (\n                <InsufficientBalanceButton symbol={state.stoken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <UnstakeButton state={state} onError={setError} disabled={false} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst UnstakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"unstake\")} loading={state.leaving} onPress={onPress} disabled={disabled} />;\n};\n\nexport default SHTUnstakeScreen;\n"],"sourceRoot":""}